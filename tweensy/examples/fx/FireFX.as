package {	import flash.display.*;	import flash.events.*;	import flash.filters.BlurFilter;	import flash.geom.ColorTransform;	import flash.utils.getDefinitionByName;		import com.flashdynamix.motion.TweensyGroup;	import com.flashdynamix.motion.effects.*;	import com.flashdynamix.motion.effects.core.*;	import com.flashdynamix.motion.extras.Emitter;	import com.flashdynamix.motion.layers.BitmapLayer;	import com.flashdynamix.utils.SWFProfiler;	/**	 * @author shanem	 */	public class FireFX extends Sprite {		private var tween : TweensyGroup;		private var emittor : Emitter;		private var layer : BitmapLayer;		private var ct : ColorTransform;		private var disp : PerlinDisplacementEffect;		private var tx : Number;		private var ty : Number;		public function FireFX() {			SWFProfiler.init(this);						tween = new TweensyGroup(false, true);			layer = new BitmapLayer(550, 400, 2);						disp = new PerlinDisplacementEffect(275, 200, 2, -6, 1);			disp.baseX = 50;			disp.baseY = 40;						layer.add(disp);			layer.add(new FilterEffect(new BlurFilter(3, 3, 1)));			layer.add(new ColorEffect(new ColorTransform(1, 1, 1, 0.95, -20, -20, -20)));						ct = new ColorTransform(0, 0, 0, 1, 80, 30, 15);						tx = 275;			ty = 300;									stage.quality = StageQuality.LOW;						var Box : Class = getDefinitionByName("Box") as Class;						emittor = new Emitter(Box, {rotation:"-45,90", scaleX:2, scaleY:2}, 2, 1, "255, 285", "5, 60", 0.5, BlendMode.ADD);			emittor.transform.colorTransform = ct;			emittor.scale = 0.2;						layer.draw(emittor.holder);						addChildAt(layer, 0);						addEvent(stage, Event.ENTER_FRAME, draw);			addEvent(stage, MouseEvent.MOUSE_MOVE, move);		}		private function move(e : MouseEvent) : void {			tx = stage.mouseX;			ty = stage.mouseY;		}		private function draw(e : Event) : void {			emittor.x += (tx - emittor.x) / 4;			emittor.y += (ty - emittor.y) / 4;		}		protected function addEvent(item : EventDispatcher, type : String, liststener : Function, priority : int = 0, useWeakReference : Boolean = true) : void {			item.addEventListener(type, liststener, false, priority, useWeakReference);		}		protected function removeEvent(item : EventDispatcher, type : String, listener : Function) : void {			item.removeEventListener(type, listener);		}	}}